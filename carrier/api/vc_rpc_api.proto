syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/carrier/api";

package carrier.api;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "carrier/api/tx_info.proto";
import "carrier/types/common.proto";

message LocalApplyVCReq {
  string          issuer_did = 1;
  string          applicant_did = 2;
  string          context = 3;     //option, "" means default
  uint64          pct_id = 4;
  string          claim = 5;
  string          expiration_date = 6;
}

message RemoteApplyVCReq {
  string          issuer_did = 1;
  string          applicant_did = 2;
  string          context = 3;     //option, "" means default
  uint64          pct_id = 4;
  string          claim = 5;      // json string
  string          expiration_date = 6;
  string          local_req_hash = 7;
}

message CreateVCRequest {
  string          applicant_did = 1;  // user's did
  string          context = 2;        // default ""
  uint64          pct_id = 3;         // pct id
  string          claim = 4;          //json string
  string          expiration_date = 5; //UTC time string, default ""
}

message CreateVCResponse {
  int32           status = 1;                      // 响应码
  string          msg = 2;                         // 错误信息
  string          vc = 3;                           // json string
  carrier.api.TxInfo tx_info = 4;
}


message LocalDownloadVCReq {
  string          issuer_did = 1;
  string          applicant_did = 2;
}

message RemoteDownloadVCReq {
  string          issuer_did = 1;
  string          applicant_did = 2;
  string          local_req_hash = 3;
}


message DownloadVCResponse {
  int32           status = 1;                      // 响应码
  string          msg = 2;                         // 错误信息
  string          vc =3;                           // json string
}

service VcService {
  rpc ApplyVCLocal (LocalApplyVCReq) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/did/applyVCLocal"
      body: "*"
    };
  }


  rpc ApplyVCRemote (RemoteApplyVCReq) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/did/applyVCRemote"
      body: "*"
    };
  }

  rpc CreateVC (CreateVCRequest) returns (CreateVCResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/did/createVC"
      body: "*"
    };
  }

  rpc DownloadVCLocal (LocalDownloadVCReq) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/did/downloadVCLocal"
      body: "*"
    };
  }

  rpc DownloadVCRemote (RemoteDownloadVCReq) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/did/downloadVCRemote"
      body: "*"
    };
  }
}

